steps:
  # Step 0: Generate dynamic version tag
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'Generate Version'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        VERSION_TAG="v-$(date +%Y%m%d-%H%M%S)"
        echo "VERSION_TAG=$VERSION_TAG" > /workspace/version.env
        echo "Generated version: $VERSION_TAG"

  # Step 1: Download ZIP file from GitHub
  - name: 'gcr.io/cloud-builders/curl'
    id: 'Download ZIP from GitHub'
    entrypoint: '/bin/sh'
    args:
      - '-c'
      - |
        curl -L https://github.com/20481A04K2/gcsgithub/archive/refs/heads/main.zip -o source.zip

  # Step 2: Show ZIP file size
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'Show ZIP File Size'
    entrypoint: '/bin/sh'
    args:
      - '-c'
      - |
        du -sh source.zip

  # Step 3: Upload ZIP to GCS Bucket
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'Upload to GCS'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        source /workspace/version.env
        gsutil cp source.zip gs://vamsi-artifact-bucket/$VERSION_TAG/source.zip

  # Step 4: Create Instance Template (Regional)
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'Create Instance Template'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        source /workspace/version.env
        gcloud compute instance-templates create vamsi-template-$VERSION_TAG \
          --machine-type=e2-medium \
          --region=asia-east1 \
          --image-family=debian-12 \
          --image-project=debian-cloud \
          --tags=http-server,https-server,allow-8080 \
          --metadata=VERSION_TAG=$VERSION_TAG \
          --metadata=startup-script='#!/bin/bash
          echo "🟢 Startup script started."
          VERSION_TAG=$(curl -s -H "Metadata-Flavor: Google" http://metadata.google.internal/computeMetadata/v1/instance/attributes/VERSION_TAG)
          echo "📦 Using version tag: $VERSION_TAG"
          apt-get update -y
          apt-get install -y unzip curl python3-pip python3.11-venv
          mkdir -p /home/sajja_vamsi/my-app
          cd /home/sajja_vamsi/my-app
          chown -R sajja_vamsi:sajja_vamsi /home/sajja_vamsi/my-app
          echo "📦 Downloading ZIP from GCS..."
          gsutil cp gs://vamsi-artifact-bucket/$VERSION_TAG/source.zip source.zip
          echo "🗜️ Unzipping..."
          unzip -o source.zip -d .
          echo "🐍 Setting up Python virtual environment..."
          python3 -m venv venv
          source venv/bin/activate
          echo "📦 Installing Flask..."
          pip install flask
          echo "🚀 Starting Flask app..."
          cd gcsgithub-main
          nohup ../venv/bin/python app.py > /home/sajja_vamsi/my-app/app.log 2>&1 &'

  # Step 5: Create or update MIG (Zonal, fixed)
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'Create or Update MIG'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        source /workspace/version.env
        if ! gcloud compute instance-groups managed describe vamsi-mig --zone=asia-east1-b > /dev/null 2>&1; then
          echo "Creating MIG..."
          gcloud compute instance-groups managed create vamsi-mig \
            --base-instance-name=vamsi-instance \
            --template=vamsi-template-$VERSION_TAG \
            --size=1 \
            --zone=asia-east1-b
        else
          echo "Updating MIG with new template..."
          gcloud compute instance-groups managed set-instance-template vamsi-mig \
            --template=vamsi-template-$VERSION_TAG \
            --zone=asia-east1-b
          gcloud compute instance-groups managed rolling-action restart vamsi-mig \
            --zone=asia-east1-b
        fi

  # Step 6: Firewall rule
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'Firewall'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        if ! gcloud compute firewall-rules describe allow-8080 --project=enhub-cloud-interns > /dev/null 2>&1; then
          gcloud compute firewall-rules create allow-8080 \
            --allow tcp:8080 \
            --target-tags=allow-8080 \
            --direction=INGRESS \
            --priority=1000 \
            --project=enhub-cloud-interns
        else
          echo "Firewall rule already exists"
        fi

  # Step 7: Regional health check
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'Regional Health Check'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        if ! gcloud compute health-checks describe vamsi-health-check --region=asia-east1 --project=enhub-cloud-interns > /dev/null 2>&1; then
          gcloud compute health-checks create http vamsi-health-check \
            --port=8080 \
            --request-path="/" \
            --check-interval=15s \
            --timeout=10s \
            --healthy-threshold=2 \
            --unhealthy-threshold=3 \
            --region=asia-east1 \
            --project=enhub-cloud-interns
        else
          echo "Regional health check already exists."
        fi

  # Step 8: Attach health check
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'Autohealing'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        gcloud compute instance-groups managed update vamsi-mig \
          --zone=asia-east1-b \
          --health-check=vamsi-health-check \
          --initial-delay=300s \
          --project=enhub-cloud-interns

  # Step 9: Enable autoscaling
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'Enable Autoscaling'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        gcloud compute instance-groups managed set-autoscaling vamsi-mig \
          --zone=asia-east1-b \
          --min-num-replicas=1 \
          --max-num-replicas=5 \
          --target-cpu-utilization=0.60 \
          --cool-down-period=60s \
          --project=enhub-cloud-interns

  # Step 10: Reserve static external IP (Zonal)
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'Reserve Static IP'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        if ! gcloud compute addresses describe vamsi-zonal-ip --region=asia-east1 --project=enhub-cloud-interns > /dev/null 2>&1; then
          gcloud compute addresses create vamsi-zonal-ip \
            --region=asia-east1 \
            --project=enhub-cloud-interns
        else
          echo "Static IP already exists."
        fi

# Continue other steps similarly...

options:
  logging: CLOUD_LOGGING_ONLY
  defaultLogsBucketBehavior: REGIONAL_USER_OWNED_BUCKET
